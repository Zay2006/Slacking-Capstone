const { App } = require('@slack/bolt');
require('dotenv').config();
const { OpenAI } = require('openai'); // Add OpenAI import

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Display environment variables for debugging (without showing full tokens)
const appTokenFirstChars = process.env.SLACK_APP_TOKEN ? 
  `${process.env.SLACK_APP_TOKEN.substring(0, 10)}...` : 'not set';
const botTokenFirstChars = process.env.SLACK_BOT_TOKEN ? 
  `${process.env.SLACK_BOT_TOKEN.substring(0, 10)}...` : 'not set';

console.log(`App Token (first chars): ${appTokenFirstChars}`);
console.log(`Bot Token (first chars): ${botTokenFirstChars}`);

// Initialize app with Socket Mode
const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  socketMode: true,
  appToken: process.env.SLACK_APP_TOKEN,
  logLevel: 'debug' // Add more detailed logging
});

// Helper function to get AI response from GPT-4 mini
async function getAIResponse(userMessage) {
  try {
    console.log('🧠 Asking AI:', userMessage);
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini", // Using GPT-4 mini model
      messages: [
        {
          role: "system",
          content: "You are Milestone Madness, a helpful assistant for a data and roadmap tracker. Your responses should be helpful, concise, and friendly. You help users keep track of their business milestones and ensure data accuracy."
        },
        {
          role: "user",
          content: userMessage
        }
      ],
      max_tokens: 300,
      temperature: 0.7,
    });

    const aiResponse = completion.choices[0].message.content;
    console.log('🧠 AI response:', aiResponse);
    return aiResponse;
  } catch (error) {
    console.error('❌ Error calling OpenAI:', error);
    return "I'm having trouble connecting to my AI brain right now. Please try again later or use one of my built-in commands.";
  }
}

// Event listener for app mentions
app.event('app_mention', async ({ event, say }) => {
  const text = event.text.toLowerCase();
  
  // Check if it's a question about what the bot can't do
  if ((text.includes("can't") || text.includes("cant") || text.includes("cannot")) && 
      (text.includes("do") || text.includes("anything")) && 
      text.includes("?")) {
    
    await say("🤔 Well, I can't make a perfect cup of coffee... yet! ☕️ I also struggle with existential crises and picking lottery numbers. But when it comes to keeping your milestones on track, I'm practically unstoppable! 💪🚀");
  } else {
    // Extract the actual message by removing the bot mention
    const cleanMessage = event.text.replace(/<@[A-Z0-9]+>/g, '').trim();
    
    if (cleanMessage) {
      // Show typing indicator
      await say({
        text: "Thinking...",
        thread_ts: event.ts
      });
      
      // Get AI response
      const aiResponse = await getAIResponse(cleanMessage);
      await say(aiResponse);
    } else {
      // Default response for empty mentions
      await say(`Hi <@${event.user}>, Thank you for using Milestone Madness! Put in a command (/audit, /reminder, /draft, or /describe) to get started.`);
    }
  }
});

// Enhanced direct message handler for questions
app.message(async ({ message, say }) => {
  // Only handle direct messages
  if (message.channel_type !== 'im' || message.bot_id || !message.text) return;
  
  const text = message.text.toLowerCase();
  
  // Special case for "can't do" questions
  if ((text.includes("can't") || text.includes("cant") || text.includes("cannot")) && 
      (text.includes("do") || text.includes("anything")) && 
      (text.includes("?") || text.includes("you") || text.includes("u"))) {
    
    await say("🤔 Well, I can't make a perfect cup of coffee... yet! ☕️ I also struggle with existential crises and picking lottery numbers. But when it comes to keeping your milestones on track, I'm practically unstoppable! 💪🚀");
  } else if (text.startsWith('/')) {
    // Remind users that slash commands don't work in DMs
    await say("It looks like you're trying to use a slash command. Please use slash commands in channels, not in direct messages. In direct messages, you can just ask me questions directly!");
  } else {
    // For all other messages, use AI to respond
    await say("Thinking...");
    
    const aiResponse = await getAIResponse(message.text);
    await say(aiResponse);
  }
});

// Message handler for channel messages
app.message(async ({ message, say, context }) => {
  // Skip direct messages (handled by the above handler), bot messages, or empty messages
  if (message.channel_type === 'im' || message.bot_id || !message.text) return;
  
  const text = message.text.toLowerCase();
  const botMentioned = message.text.includes(`<@${context.botUserId}>`);
  
  // Only respond in channels if bot is mentioned
  if (!botMentioned) return;
  
  // Special case for "can't do" questions
  if ((text.includes("can't") || text.includes("cant") || text.includes("cannot")) && 
      (text.includes("do") || text.includes("anything")) && 
      (text.includes("?") || text.includes("you") || text.includes("u"))) {
    
    await say("🤔 Well, I can't make a perfect cup of coffee... yet! ☕️ I also struggle with existential crises and picking lottery numbers. But when it comes to keeping your milestones on track, I'm practically unstoppable! 💪🚀");
  } else {
    // Extract the actual message by removing the bot mention
    const cleanMessage = message.text.replace(/<@[A-Z0-9]+>/g, '').trim();
    
    if (cleanMessage) {
      // Show typing indicator
      await say({
        text: "Thinking...",
        thread_ts: message.ts
      });
      
      // Get AI response
      const aiResponse = await getAIResponse(cleanMessage);
      await say(aiResponse);
    }
  }
});

// Slash commands
app.command('/audit', async ({ command, ack, respond, client, say }) => {
  console.log('📋 /audit command received:', command.text);
  await ack();
  
  // Use respond with response_type: 'in_channel' to make it visible to everyone
  await respond({
    response_type: 'in_channel', // Makes the message visible to everyone
    text: '📝 Data Audit: No major issues detected. Accuracy and completeness look good!'
  });
});

app.command('/draft', async ({ command, ack, respond, client, say }) => {
  console.log('📝 /draft command received:', command.text);
  await ack();
  
  // Use respond with response_type: 'in_channel' to make it visible to everyone
  await respond({
    response_type: 'in_channel', // Makes the message visible to everyone
    text: '🖊️ Draft complete: "Remember to review data consistency before finalizing your roadmap."'
  });
});

app.command('/reminder', async ({ command, ack, respond }) => {
  console.log('⏰ /reminder command received:', command.text);
  await ack();
  
  // Use respond with response_type: 'in_channel' to make it visible to everyone
  await respond({
    response_type: 'in_channel', // Makes the message visible to everyone
    text: '⏰ Reminder: "Check roadmap progress tomorrow at 10 AM!"'
  });
});

app.command('/describe', async ({ command, ack, respond }) => {
  console.log('ℹ️ /describe command received:', command.text);
  await ack();
  
  await respond({
    response_type: 'in_channel', // Makes the message visible to everyone
    text: 'Milestone Madness is a Data and Roadmap tracker that will use AI to assist with keeping track of your business and makes sure that all is accurate and remember only you can prevent mixups'
  });
});

// Health check endpoint (optional, independent of Slack)  
const express = require('express');
const health = express();
health.get('/', (_, res) => res.send('✅ Milestone Madness is alive!'));
health.listen(4000, () => console.log('Health check on http://localhost:4000'));

// Socket Mode connection handler
app.use(async ({ logger, next }) => {
  logger.debug('New request handled by Bolt app');
  await next();
});

// Start the app in Socket Mode
(async () => {
  try {
    await app.start();
    console.log('⚡️ Milestone Madness bot is running in Socket Mode!');
    console.log('📡 No need for tunnels or public URLs with Socket Mode');
  } catch (error) {
    console.error('Failed to start app:', error);
    console.log('\n\n---- TROUBLESHOOTING ----');
    console.log('1. Check your SLACK_APP_TOKEN starts with "xapp-"');
    console.log('2. Make sure Socket Mode is enabled in your Slack App settings');
    console.log('3. Verify the App Token has the connections:write scope');
    console.log('4. Try reinstalling your app to the workspace');
  }
})();